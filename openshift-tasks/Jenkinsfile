#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml"
    // Checkout Source Code.
    stage('Checkout Source') {
      checkout scm
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")
      def devTag  = "${version}-${currentBuild.number}"
      def prodTag = "${version}"
      def devProject  = "${GUID}-tasks-dev"
      def prodProject = "${GUID}-tasks-prod"

      // Using Maven build the war file
      // Do not run tests in this step
      stage('Build war') {
        echo "Building version ${devTag}"

        sh "${mvnCmd} clean package -DskipTests=true"
      }

      // TBD: The next two stages should run in parallel
      stage('Maven Unit Tests') {
        echo "Running Unit Tests"

        sh "${mvnCmd} test"
      }

        // Using Maven to call SonarQube for Code Analysis
      stage('SonarQube Code Analysis') {
        echo "Running Code Analysis"

        sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://${SONARQUBE_URL}/ -Dsonar.projectName=${JOB_BASE_NAME} -Dsonar.projectVersion=${devTag}"
      }
      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"

        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://${NEXUS_URL}/repository/releases"
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"

        openshift.withCluster() {
          openshift.withProject("${devProject}") {
            openshift.selector("bc", "tasks").startBuild("--from-file=./target/openshift-tasks.war", "--wait=true")

            // OR use the file you just published into Nexus:
            // "--from-file=http://nexus3.${prefix}-nexus.svc.cluster.local:8081/repository/releases/org/jboss/quickstarts/eap/tasks/${version}/tasks-${version}.war"
            openshift.tag("tasks:latest", "tasks:${devTag}")
          }
        }
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"

        openshift.withCluster() {
          openshift.withProject("${devProject}") {
            // Set Image, Set VERSION
            openshift.set("image", "dc/tasks", "tasks=docker-registry.default.svc:5000/${devProject}/tasks:${devTag}")

            // Update the Config Map which contains the users for the Tasks application
            // (just in case the properties files changed in the latest commit)
            openshift.selector('configmap', 'tasks-config').delete()
            def configmap = openshift.create('configmap', 'tasks-config', '--from-file=./configuration/application-users.properties', '--from-file=./configuration/application-roles.properties' )

            // Deploy the development application.
            openshift.selector("dc", "tasks").rollout().latest();

            // Wait for application to be deployed
            def dc = openshift.selector("dc", "tasks").object()
            def dc_version = dc.status.latestVersion
            def rc = openshift.selector("rc", "tasks-${dc_version}").object()

            // Make sure the application is running and ready before proceeding
            echo "Waiting for ReplicationController tasks-${dc_version} to be ready"
            while (rc.spec.replicas != rc.status.readyReplicas) {
              sleep 5
              rc = openshift.selector("rc", "tasks-${dc_version}").object()
            }
          }
        }
      }

      stage('Integration Tests') {
        echo "Running Integration Tests"
        def status = "000"

        // Create a new task called "integration_test_1"
        echo "Creating task"
        // The next bit works - but only after the application
        // has been deployed successfully
        status = sh(returnStdout: true, script: "curl -sw '%{response_code}' -o /dev/null -u 'tasks:redhat1' -H 'Content-Length: 0' -X POST http://tasks.${prefix}-tasks-dev.svc.cluster.local:8080/ws/tasks/integration_test_1").trim()
        echo "Status: " + status
        if (status != "201") {
            error 'Integration Create Test Failed!'
        }

        echo "Retrieving tasks"
        // TBD: Implement check to retrieve the task
        status = sh(returnStdout: true, script: "curl -sw '%{response_code}' -o /dev/null -u 'tasks:redhat1' -H 'Accept: application/json' -X GET http://tasks.${prefix}-tasks-dev.svc.cluster.local:8080/ws/tasks/1").trim()
        if (status != "200") {
            error 'Integration Get Test Failed!'
        }
        echo "Deleting tasks"
        // TBD: Implement check to delete the task
        status = sh(returnStdout: true, script: "curl -sw '%{response_code}' -o /dev/null -u 'tasks:redhat1' -X DELETE http://tasks.${prefix}-tasks-dev.svc.cluster.local:8080/ws/tasks/1").trim()
        if (status != "204") {
            error 'Integration Create Test Failed!'
        }
      }
            

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"

        sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:redhat docker://docker-registry.default.svc:5000/${devProject}/tasks:${devTag} docker://${NEXUS_REG_URL}/tasks:${devTag}"

        // TBD: Tag the built image with the production tag.
        openshift.withCluster() {
          openshift.withProject("${prodProject}") {
            openshift.tag("${devProject}/tasks:${devTag}", "${devProject}/tasks:${prodTag}")
          }
        }
      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = "tasks-green"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
        // TBD: Determine which application is active
        openshift.withCluster() {
          openshift.withProject("${prodProject}") {
            activeApp = openshift.selector("route", "tasks").object().spec.to.name
            if (activeApp == "tasks-green") {
              destApp = "tasks-blue"
            }
            echo "Active Application:      " + activeApp
            echo "Destination Application: " + destApp

            // Update the Image on the Production Deployment Config
            def dc = openshift.selector("dc/${destApp}").object()

            // OpenShift 4
            // dc.spec.template.spec.containers[0].image="image-registry.openshift-image-registry.svc:5000/${devProject}/tasks:${prodTag}"
            // OpenShift 3
            dc.spec.template.spec.containers[0].image="docker-registry.default.svc:5000/${devProject}/tasks:${prodTag}"

            openshift.apply(dc)

            // Update Config Map in change config files changed in the source
            openshift.selector("configmap", "${destApp}-config").delete()
            def configmap = openshift.create("configmap", "${destApp}-config", "--from-file=./configuration/application-users.properties", "--from-file=./configuration/application-roles.properties" )

            // Deploy the inactive application.
            openshift.selector("dc", "${destApp}").rollout().latest();

            // Wait for application to be deployed
            def dc_prod = openshift.selector("dc", "${destApp}").object()
            def dc_version = dc_prod.status.latestVersion
            def rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
            echo "Waiting for ${destApp} to be ready"
            while (rc_prod.spec.replicas != rc_prod.status.readyReplicas) {
              sleep 5
              rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
            }
          }
        }        
      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
        sh('oc patch route tasks -p \'{"spec":{"to":{"name":"' + destApp + '"}}}\' -n ' + "${GUID}-tasks-prod")
      }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}